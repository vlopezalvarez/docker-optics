This is a quick guide for having fast access to the commands

== WORKING WITH CONTAINERS
These are examples to run from command line the containers:

- Build a Docker image
docker build -t docker-optics .
- Run the a context of the Docker image with a shared folder
docker container run --name optics-image -v ~/Downloads/lab:/root/lab -it docker-optics 
- Delete the context of the Docker image
docker rm optics-image 
- Delete Docker image
docker image rm docker-optics

== SNMP
- Start the SNMP server
snmpsimd.py --data-dir=data --agent-udpv4-endpoint=127.0.0.1:1161 --process-user=root --process-group=root

- Run a console in the Docker image
docker exec -it optics-image /bin/bash

- Obtain information from the SNMP server
snmpget -c public -v1 127.0.0.1:1161 1.3.6.1.2.1.1.7.0


== YANG

cd /root/OFC_SC472/yang
cat topology.yang
pyang -f tree topology.yang
pyang -f sample-xml-skeleton --sample-xml-skeleton-annotations topology.yang
export PYBINDPLUGIN=`/usr/bin/env python3 -c \
'import pyangbind; import os; print ("{}/plugin".format(os.path.dirname(pyangbind.__file__)))'`
echo $PYBINDPLUGIN
pyang -f pybind topology.yang --plugindir $PYBINDPLUGIN -o binding_topology.py
python3 topology.py

== NETCONF

cd /root/OFC_SC472/netconf 
python3 serverTopology.py

- Run a client in the Docker image
docker exec -it optics-image /bin/bash

cd /root/OFC_SC472/netconf
python3 clientTopology.py

== RESTCONF

- Generate YAML file
cd /root/OFC_SC472/restconf
java -jar swagger-generator-cli-1.1.11-executable.jar -yang-dir ../yang/ -output connection.yaml connection

- Generate Server Code
java -jar swagger-codegen-cli.jar generate -i connection.yaml -l python-flask -o server/

- Launch the empty Server
cd /root/OFC_SC472/restconf/server
cp swagger_server/swagger/swagger.yaml swagger_old.yaml
cat swagger_old.yaml | sed 's/name: connection_id/name: connection-id/' > swagger_server/swagger/swagger.yaml
python3 -m swagger_server

- Run a client in the Docker image
docker exec -it optics-image /bin/bash

- Interact with the empty RESTCONF Server
cd /root/OFC_SC472/restconf
curl -X POST -H "Content-Type: application/yang-data+json" http://127.0.0.1:8080/data/connection/ -d@conn1.json

- Launch the Example RESTCONF Server
cd /root/OFC_SC472/restconf/connectionserver 
python3 -m swagger_server

- Run a client in the Docker image
docker exec -it optics-image /bin/bash

- Interact with the Example RESTCONF Server
cd /root/OFC_SC472/restconf
curl -X POST -H "Content-Type: application/yang-data+json" http://127.0.0.1:8080/data/connection/ -d@conn1.json
curl -X GET -H "Content-Type: application/yang-data+json" http://127.0.0.1:8080/data/connection=0/

== GRPC

- Run connectionService SERVER
cd /root/OFC_SC472/grpc/connectionService
python3 connectionService_server.py

- Run connectionService CLIENT (in another window)
docker exec -it optics-image /bin/bash
cd /root/OFC_SC472/grpc/connectionService
python3 connectionService_client.py

- Run connectionServiceWithNotifSERVER
cd /root/OFC_SC472/grpc/connectionServiceWithNotif
python3 connectionServiceWithNotif_server.py

- Capture the traffic
docker exec -it optics-image /bin/bash
tcpdump -i lo -w mycap.pcap

- Run connectionServiceWithNotif CLIENT (in another window)
docker exec -it optics-image /bin/bash
cd /root/OFC_SC472/grpc/connectionServiceWithNotif
python3 connectionServiceWithNotif_client.py
